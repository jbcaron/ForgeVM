var searchIndex = new Map(JSON.parse('[\
["forge_vm",{"doc":"","t":"PPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO","n":["ADD","AND","CALL","CLF","CMP","DEC","DIV","DivisionByZero","HLT","INC","Instruction","InvalidInstruction","InvalidOpcode","InvalidRegister","JMP","JMPN","JMPP","JMPZ","LD","MOD","MOV","MULT","MemoryNotAligned","MemoryOutOfBounds","NOP","NOT","OR","Other","POPREG","PUSHREG","RET","ST","SUB","StackOverflow","StackUnderflow","VM","VmError","XOR","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","run","size","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","address","address","address","address","address","address","address","dest","dest","dest","dest","dest","dest","dest","dest","dest","dest","dest","reg","reg","reg","reg","reg","reg1","reg1","reg1","reg1","reg1","reg1","reg1","reg1","reg1","reg2","reg2","reg2","reg2","reg2","reg2","reg2","reg2","reg2","src","value","address","address","opcode","register","size","size"],"q":[[0,"forge_vm"],[76,"forge_vm::Instruction"],[119,"forge_vm::VmError"],[125,"core::clone"],[126,"core::cmp"],[127,"core::fmt"],[128,"core::fmt"],[129,"alloc::string"],[130,"core::any"]],"d":["Add two registers and store the result in a destination …","Logical AND two registers and store the result in a …","Call a function","Clear the flags","Compare two registers and set the zero flag if they are …","Decrement a register","Divide two registers and store the result in a destination …","","Stop the program","Increment a register","","","","","Jump to a location in memory","Jump if negative flag is set","Jump if negative flag is not set","Jump if zero flag is set","Load a value from memory into a register","Modulo two registers and store the result in a destination …","Move the value into a register","Multiply two registers and store the result in a …","","","No operation","Logical NOT a register and store the result in a …","Logical OR two registers and store the result in a …","","Pop a register from the stack","Push a register onto the stack","Return from a function","Store a value from a register into memory","Subtract two registers and store the result in a …","","","Virtual Machine (VM) designed for 32-bit architecture …","","Logical XOR two registers and store the result in a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new instance of the VM.","Runs the VM with a given program.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,2,2,2,2,2,2,1,2,2,0,1,1,1,2,2,2,2,2,2,2,2,1,1,2,2,2,1,2,2,2,2,2,1,1,0,0,2,14,1,2,14,1,2,1,2,1,2,1,2,1,1,2,2,14,1,2,14,1,2,14,14,2,1,2,1,2,14,1,2,14,1,2,14,1,2,21,22,23,24,25,26,27,28,21,29,30,31,32,33,34,35,36,37,32,38,39,40,41,29,30,31,42,33,34,35,36,37,29,30,31,42,33,34,35,36,37,22,28,43,44,45,46,43,44],"f":"``````````````````````````````````````{ce{}{}}00000{bb}{{{d{ce}}}{{d{ce}}}ff}{{ce}h{}{}}0{{bb}j}{{{d{ce}}{d{ce}}}jll}{{bn}A`}0{{{d{ce}}n}A`Ab{AbAd}}{{{d{ce}}n}A`AfAf}{cc{}}00999{{AhAh}{{Al{Aj}}}}{{{Al{Aj}}{B`{An}}}{{Bd{Bbb}}}}{{{d{ce}}}Ah{}{}}<<{cBf{}}0{c{{Bd{e}}}{}{}}00000{cBh{}}00`````````````````````````````````````````````````","c":[],"p":[[6,"VmError",0],[6,"Instruction",0],[10,"Clone",125],[1,"unit"],[1,"bool"],[10,"PartialEq",126],[5,"Formatter",127],[8,"Result",127],[10,"Display",127],[10,"LowerHex",127],[10,"Debug",127],[1,"usize"],[1,"i32"],[5,"VM",0],[1,"u8"],[1,"slice"],[1,"u128"],[6,"Result",128],[5,"String",129],[5,"TypeId",130],[15,"LD",76],[15,"ST",76],[15,"JMP",76],[15,"JMPN",76],[15,"JMPP",76],[15,"JMPZ",76],[15,"CALL",76],[15,"MOV",76],[15,"AND",76],[15,"OR",76],[15,"XOR",76],[15,"NOT",76],[15,"ADD",76],[15,"SUB",76],[15,"MULT",76],[15,"DIV",76],[15,"MOD",76],[15,"INC",76],[15,"DEC",76],[15,"PUSHREG",76],[15,"POPREG",76],[15,"CMP",76],[15,"MemoryOutOfBounds",119],[15,"MemoryNotAligned",119],[15,"InvalidOpcode",119],[15,"InvalidRegister",119]],"b":[[50,"impl-Display-for-VmError"],[51,"impl-Debug-for-VmError"],[52,"impl-Display-for-Instruction%3CD,+T%3E"],[53,"impl-Debug-for-Instruction%3CD,+A%3E"]]}],\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The source file containing the message, if it is a <code>&#39;static</code> …","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,10,4,4,6,6,8,7,12,0,1,3,1,3,10,4,4,6,6,1,3,8,7,17,17,12,12,4,6,1,3,8,7,17,12,4,6,4,6,8,7,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,1,3,10,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,0],"f":"`````````````````````{bd}{{fd}f}{hj}{lj}{ce{}{}}000000000000000{fb}{nA`}{{}f}{{}n}{hh}{ll}{bb}{A`A`}{{hh}Ab}{{ll}Ab}{{A`A`}Ab}{{nn}Ab}`98{{AdA`}Af}{{hh}Af}{{hl}Af}{{lh}Af}{{ll}Af}{{A`A`}Af}{{nn}Af}{{AhAh}Af}`{b{{Aj{j}}}}{{f{Aj{j}}}f}10{AdAl}{{hAn}B`}0{{lAn}B`}0{{bAn}B`}{{fAn}B`}{{A`An}B`}{{nAn}B`}{{BbAn}B`}0{{AhAn}B`}0{cc{}}0000000{j{{Bd{hc}}}{}}{j{{Bd{lc}}}{}}{{hc}AlBf}{{lc}AlBf}{{A`c}AlBf}{{nc}AlBf}`{ce{}{}}0000000{{}{{`{{Bj{}{{Bh{h}}}}}}}}{{}{{`{{Bj{}{{Bh{l}}}}}}}}{bh}{{fh}f}{A`h}{{nh}n}{b{{Aj{Bl}}}}{{f{Aj{Bl}}}f}{{Adb}Al}``{{}Ad}{{}h}{{}l}0{bA`}{{fA`}f}{b{{Aj{j}}}}{{f{Aj{j}}}f}10{{}f}{{}n}{{hh}{{Aj{Ab}}}}{{hl}{{Aj{Ab}}}}{{lh}{{Aj{Ab}}}}{{ll}{{Aj{Ab}}}}{{A`A`}{{Aj{Ab}}}}{{nn}{{Aj{Ab}}}}{Ad{{Bd{AlBb}}}}0{lAl}0{bj}{{fj}f}{A`j}{{nj}n}{l{{Aj{h}}}}{hl}`{c{{Bd{e}}}{}{}}000000000000000{cBn{}}0000000`","c":[],"p":[[5,"Record",0],[5,"Arguments",170],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[6,"Ordering",171],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",172],[1,"unit"],[5,"Formatter",170],[8,"Result",170],[5,"SetLoggerError",0],[6,"Result",173],[10,"Hasher",174],[17,"Item"],[10,"Iterator",175],[1,"u32"],[5,"TypeId",176]],"b":[[57,"impl-PartialEq-for-Level"],[58,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[59,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[60,"impl-PartialEq-for-LevelFilter"],[70,"impl-Display-for-Level"],[71,"impl-Debug-for-Level"],[72,"impl-Debug-for-LevelFilter"],[73,"impl-Display-for-LevelFilter"],[78,"impl-Debug-for-SetLoggerError"],[79,"impl-Display-for-SetLoggerError"],[80,"impl-Debug-for-ParseLevelError"],[81,"impl-Display-for-ParseLevelError"],[128,"impl-PartialOrd-for-Level"],[129,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[130,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[131,"impl-PartialOrd-for-LevelFilter"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
